{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chumu\\\\Desktop\\\\FullStackTraining\\\\SportTogether\\\\frontend\\\\src\\\\components\\\\Forms\\\\UploadIcon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Spinner } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { dialogActions } from '../../store/modalAndAlerts';\nimport \"./UploadIcon.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UploadIcon = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedFile, setSelectedFile] = useState();\n  const [responseOk, setResponseOk] = useState(false);\n  const [preview, setPreview] = useState();\n  const dispatch = useDispatch();\n  useSelector(state => state.dialog.modalToggle);\n  const token = useSelector(state => state.authentication.token);\n\n  const handleModalClose = () => {\n    dispatch(dialogActions.modalToggle());\n  };\n\n  const handleImage = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handlePreview = async event => {\n    setIsLoading(true);\n    const formData = new FormData();\n    formData.append('profile', selectedFile);\n    const objectUrl = URL.createObjectURL(selectedFile);\n    setPreview(objectUrl);\n    setResponseOk(true);\n    setIsLoading(false);\n  };\n\n  const handleUpload = async () => {\n    setIsLoading(true);\n    const formData = new FormData();\n    formData.append('profile', selectedFile);\n    const response = await fetch('http://localhost:5000/uploadimage', {\n      method: 'POST',\n      headers: {\n        'Authorization': \"Bearer \" + token\n      },\n      body: formData\n    });\n    const responseData = await response.json();\n\n    if (response.ok) {\n      console.log('responseOK Upload', responseData);\n      setIsLoading(false);\n    } else {\n      console.log('response NOT OK', responseData);\n      setIsLoading(false);\n    }\n\n    setResponseOk(false);\n    setPreview(null);\n    setIsLoading(false);\n    dispatch(dialogActions.modalToggle());\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [!responseOk && /*#__PURE__*/_jsxDEV(\"form\", {\n      encType: \"multipart/form-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-upload\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"fileUpload\",\n            name: \"profile\",\n            onChange: handleImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-arrow-up\",\n            style: {\n              'fontSize': '40px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handlePreview,\n        style: {\n          borderColor: 'transparent'\n        },\n        disabled: isLoading,\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }, this), responseOk && /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Please don't close this window while we processing your request\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: preview,\n        alt: \"errorIMG\",\n        style: {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleModalClose,\n        style: {\n          borderColor: 'transparent'\n        },\n        disabled: isLoading,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleUpload,\n        style: {\n          borderColor: 'transparent'\n        },\n        disabled: isLoading,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UploadIcon, \"t8m7fwMS+TK3ugmM8BZUA2ynSS8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UploadIcon;\nexport default UploadIcon;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadIcon\");","map":{"version":3,"sources":["C:/Users/chumu/Desktop/FullStackTraining/SportTogether/frontend/src/components/Forms/UploadIcon.js"],"names":["React","useState","Button","Spinner","useSelector","useDispatch","dialogActions","UploadIcon","isLoading","setIsLoading","selectedFile","setSelectedFile","responseOk","setResponseOk","preview","setPreview","dispatch","state","dialog","modalToggle","token","authentication","handleModalClose","handleImage","event","target","files","handlePreview","formData","FormData","append","objectUrl","URL","createObjectURL","handleUpload","response","fetch","method","headers","body","responseData","json","ok","console","log","borderColor"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { dialogActions } from '../../store/modalAndAlerts'\r\nimport \"./UploadIcon.css\";\r\n\r\nconst UploadIcon = () => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [selectedFile, setSelectedFile] = useState()\r\n  const [responseOk, setResponseOk] = useState(false)\r\n  const [preview, setPreview] = useState()\r\n\r\n  const dispatch = useDispatch()\r\n  useSelector((state) => state.dialog.modalToggle)\r\n\r\n  const token = useSelector((state) => state.authentication.token)\r\n\r\n  const handleModalClose = () => {\r\n    dispatch(dialogActions.modalToggle())\r\n  }\r\n\r\n  const handleImage = (event) => {\r\n\t\tsetSelectedFile(event.target.files[0]);\r\n\t};\r\n\r\n  const handlePreview = async (event) => {\r\n    setIsLoading(true);\r\n    const formData = new FormData();\r\n\t\tformData.append('profile', selectedFile);\r\n    const objectUrl = URL.createObjectURL(selectedFile)\r\n    setPreview(objectUrl)\r\n    setResponseOk(true)\r\n    setIsLoading(false)\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    setIsLoading(true)\r\n    const formData = new FormData();\r\n\t\tformData.append('profile', selectedFile);\r\n    const response = await fetch('http://localhost:5000/uploadimage',\r\n    {\r\n      method: 'POST',\r\n      headers:{'Authorization': \"Bearer \" + token},\r\n      body: formData\r\n    })\r\n    const responseData = await response.json()\r\n    if(response.ok){\r\n      console.log('responseOK Upload', responseData)\r\n      setIsLoading(false)\r\n    }else{\r\n      console.log('response NOT OK', responseData)\r\n      setIsLoading(false)\r\n    }\r\n    setResponseOk(false)\r\n    setPreview(null)\r\n    setIsLoading(false)\r\n    dispatch(dialogActions.modalToggle())\r\n  }\r\n\t\r\n  return (\r\n    <React.Fragment>\r\n      {!responseOk && <form encType=\"multipart/form-data\">\r\n        <div className=\"wrapper\"  >\r\n          <div className=\"file-upload\">\r\n            <input type=\"file\" id=\"fileUpload\" name=\"profile\" onChange={handleImage}/>\r\n            <i className=\"fa fa-arrow-up\" style={{'fontSize':'40px'}}></i>\r\n          </div>\r\n        </div>\r\n        <Button onClick={handlePreview} style={{borderColor:'transparent'}} disabled={isLoading}>Preview</Button>\r\n      </form>}\r\n      {responseOk && <form>\r\n        {isLoading && <div>Please don't close this window while we processing your request</div>}\r\n        <img src={preview} alt=\"errorIMG\" style={{}}/>\r\n        {isLoading && <Spinner animation=\"border\" variant=\"primary\"/>}\r\n        <Button onClick={handleModalClose} style={{borderColor:'transparent'}} disabled={isLoading}>Close</Button>\r\n        <Button onClick={handleUpload} style={{borderColor:'transparent'}} disabled={isLoading}>Upload</Button>\r\n      </form>}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\nexport default UploadIcon;"]},"metadata":{},"sourceType":"module"}