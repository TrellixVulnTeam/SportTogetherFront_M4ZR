{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chumu\\\\Desktop\\\\FullStackTraining\\\\SportTogether\\\\frontend\\\\src\\\\components\\\\Forms\\\\LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from \"react-redux\";\nimport { authActions } from \"../../store/auth\"; // import {AuthContext} from '../../shared/context/auth-context'\n\nimport { Form, Button, Spinner } from \"react-bootstrap\";\nimport \"./LoginForm.css\";\nimport { userActions } from \"../../store/userData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginForm = props => {\n  _s();\n\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputPw, setInputPw] = useState('');\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState();\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const formCheckboxHandler = () => {\n    setRememberMe(true);\n  };\n\n  const handleRoute = () => {\n    history.push(\"/events\");\n  };\n\n  const loginFormHandler = async e => {\n    e.preventDefault();\n\n    try {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:5000/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'email': inputEmail,\n          'password': inputPw,\n          'rememberMe': rememberMe\n        })\n      });\n      const responseData = await response.json();\n\n      if (response.ok) {\n        console.log('response.OK login > responseData >', responseData);\n        let tokenExp;\n\n        if (responseData.rememberMe === true) {\n          tokenExp = new Date().getTime() + 1000 * 60 * 60 * 24 * 7;\n        } else {\n          tokenExp = new Date().getTime() + 1000 * 60 * 60 * 3;\n        }\n\n        localStorage.setItem('userData', JSON.stringify({\n          userId: responseData.userId,\n          token: responseData.token,\n          expiration: tokenExp\n        }));\n        /*tokenExp it was tokenExp.toISOString() and above dates not converted to strings */\n\n        local;\n        dispatch(authActions.tokenExpiration(tokenExp));\n        dispatch(authActions.isAuthenticated(true));\n        dispatch(authActions.token(responseData.token));\n      } else {\n        setIsError(responseData.error);\n        setInputPw('');\n        setIsLoading(false);\n        return new Error(responseData.message);\n      }\n    } catch (error) {\n      setIsLoading(false);\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loginContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loginForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this), isError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-5\",\n          id: \"noticeEvent\",\n          children: [\" \", isError]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          action: \"/login\",\n          onSubmit: loginFormHandler,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              placeholder: \"Enter email\",\n              value: inputEmail,\n              onInput: e => setInputEmail(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"We'll never share your email or password with anyone else.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicPassword\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              placeholder: \"Password\",\n              value: inputPw,\n              onInput: e => setInputPw(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            style: {\n              'float': 'right'\n            },\n            controlId: \"formBasicCheckbox\",\n            children: /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              label: \"Remember me\",\n              onClick: formCheckboxHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this), !isLoading && /*#__PURE__*/_jsxDEV(Button, {\n            className: \"login__button\",\n            onClick: handleRoute,\n            type: \"submit\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 26\n          }, this), isLoading && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            disabled: true,\n            children: [/*#__PURE__*/_jsxDEV(Spinner, {\n              as: \"span\",\n              animation: \"grow\",\n              size: \"sm\",\n              role: \"status\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 13\n            }, this), \"Loading...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginForm, \"EqZBMAZ3Qggli8lmbrHgzps5LDo=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["C:/Users/chumu/Desktop/FullStackTraining/SportTogether/frontend/src/components/Forms/LoginForm.js"],"names":["React","useState","useHistory","useDispatch","authActions","Form","Button","Spinner","userActions","LoginForm","props","inputEmail","setInputEmail","inputPw","setInputPw","rememberMe","setRememberMe","isLoading","setIsLoading","isError","setIsError","dispatch","history","formCheckboxHandler","handleRoute","push","loginFormHandler","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","responseData","json","ok","console","log","tokenExp","Date","getTime","localStorage","setItem","userId","token","expiration","local","tokenExpiration","isAuthenticated","error","Error","message","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useDispatch } from \"react-redux\";\r\nimport { authActions } from \"../../store/auth\"; \r\n// import {AuthContext} from '../../shared/context/auth-context'\r\nimport { Form, Button, Spinner } from \"react-bootstrap\";\r\nimport \"./LoginForm.css\";\r\nimport { userActions } from \"../../store/userData\";\r\n\r\nconst LoginForm = (props) => {\r\n  const [inputEmail, setInputEmail] = useState('')\r\n  const [inputPw, setInputPw] = useState('')\r\n  const [rememberMe, setRememberMe] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [isError, setIsError] = useState()\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  \r\n  const formCheckboxHandler = () => {\r\n    setRememberMe(true)\r\n  }\r\n   \r\n  const handleRoute = () => {\r\n    history.push(\"/events\");\r\n  }\r\n\r\n  const loginFormHandler = async(e) => {\r\n    e.preventDefault()\r\n    try {\r\n      setIsLoading(true)\r\n      const response = await fetch('http://localhost:5000/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          'email': inputEmail,\r\n          'password': inputPw,\r\n          'rememberMe': rememberMe\r\n        })\r\n      })\r\n      const responseData = await response.json()\r\n      if(response.ok){\r\n        console.log('response.OK login > responseData >',responseData)\r\n  \r\n        let tokenExp;\r\n        if(responseData.rememberMe === true){\r\n          tokenExp =  new Date().getTime() + (1000 * 60 * 60 * 24 * 7)\r\n        }else{\r\n          tokenExp = new Date().getTime() + (1000 * 60 * 60 * 3)\r\n        }\r\n        localStorage.setItem('userData', JSON.stringify({userId:responseData.userId, token:responseData.token, expiration: tokenExp})) /*tokenExp it was tokenExp.toISOString() and above dates not converted to strings */\r\n        local\r\n\r\n        dispatch(authActions.tokenExpiration(tokenExp))\r\n        dispatch(authActions.isAuthenticated(true))\r\n        dispatch(authActions.token(responseData.token)) \r\n\r\n\r\n      }else{\r\n        setIsError(responseData.error)\r\n        setInputPw('')\r\n        setIsLoading(false)\r\n        return new Error(responseData.message) \r\n      }\r\n    } catch (error) {\r\n      setIsLoading(false)\r\n      console.error(error)\r\n    } \r\n  }\r\n\r\n  return (\r\n    <div className=\"loginContainer\">\r\n      <div className=\"box\">\r\n        <div className=\"loginForm\">\r\n        <h3>Login</h3>\r\n        {isError && <p className=\"mb-5\" id=\"noticeEvent\"> {isError}</p>}\r\n        <Form action=\"/login\" onSubmit={loginFormHandler}>\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control type=\"email\" placeholder=\"Enter email\"  value={inputEmail} onInput={e => setInputEmail(e.target.value)} required/>\r\n            <Form.Text className=\"text-muted\">\r\n              We'll never share your email or password with anyone else.\r\n            </Form.Text>\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Password\" value={inputPw} onInput={e => setInputPw(e.target.value)} required/>\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\"  style={{'float':'right'}} controlId=\"formBasicCheckbox\">\r\n            <Form.Check type=\"checkbox\" label=\"Remember me\" onClick={formCheckboxHandler} />\r\n          </Form.Group>\r\n          {!isLoading && <Button className=\"login__button\" onClick={handleRoute} type=\"submit\">Login</Button>}\r\n         {isLoading && <Button variant=\"primary\" disabled>\r\n            <Spinner\r\n              as=\"span\"\r\n              animation=\"grow\"\r\n              size=\"sm\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            />\r\n            Loading...\r\n          </Button>}\r\n        </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}