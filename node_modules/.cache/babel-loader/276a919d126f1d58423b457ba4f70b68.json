{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialAuthState = {\n  isLogged: false,\n  userId: null,\n  token: null,\n  login: () => {},\n  logout: () => {}\n};\nconst authSlice = createSlice({\n  name: 'authorization',\n  initialState: initialAuthState,\n  reducers: {\n    isLogged(state) {\n      state.isLogged = !state.isLogged;\n    },\n\n    userId(state) {\n      state.userId = state.userId;\n    },\n\n    token(state, action) {\n      state.token = action.tokenString;\n    },\n\n    login() {},\n\n    logout() {}\n\n  }\n});\n\nconst authorization = (state = initialAuthState, action) => {\n  if (action.type === 'login') {\n    return {\n      isLogged: state.isLogged = action.value\n    };\n  }\n};\n\nconst store = createStore(authSlice.reducer);\nexport default store;","map":{"version":3,"sources":["C:/Users/chumu/Desktop/FullStackTraining/SportTogether/frontend/src/store/index.js"],"names":["createStore","createSlice","configureStore","initialAuthState","isLogged","userId","token","login","logout","authSlice","name","initialState","reducers","state","action","tokenString","authorization","type","value","store","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,QAAQ,EAAE,KADW;AAErBC,EAAAA,MAAM,EAAC,IAFc;AAGrBC,EAAAA,KAAK,EAAC,IAHe;AAIrBC,EAAAA,KAAK,EAAE,MAAM,CAAE,CAJM;AAKrBC,EAAAA,MAAM,EAAE,MAAM,CAAE;AALK,CAAzB;AAQA,MAAMC,SAAS,GAAGR,WAAW,CAAC;AAC1BS,EAAAA,IAAI,EAAC,eADqB;AAE1BC,EAAAA,YAAY,EAAER,gBAFY;AAG1BS,EAAAA,QAAQ,EAAE;AACNR,IAAAA,QAAQ,CAACS,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACT,QAAN,GAAiB,CAACS,KAAK,CAACT,QAAxB;AACH,KAHK;;AAINC,IAAAA,MAAM,CAACQ,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACR,MAAN,GAAeQ,KAAK,CAACR,MAArB;AACH,KANK;;AAONC,IAAAA,KAAK,CAACO,KAAD,EAAQC,MAAR,EAAgB;AACjBD,MAAAA,KAAK,CAACP,KAAN,GAAcQ,MAAM,CAACC,WAArB;AACH,KATK;;AAUNR,IAAAA,KAAK,GAAG,CAAE,CAVJ;;AAWNC,IAAAA,MAAM,GAAG,CAAE;;AAXL;AAHgB,CAAD,CAA7B;;AAkBA,MAAMQ,aAAa,GAAG,CAACH,KAAK,GAAGV,gBAAT,EAA2BW,MAA3B,KAAuC;AACzD,MAAGA,MAAM,CAACG,IAAP,KAAgB,OAAnB,EAA2B;AACvB,WAAO;AACHb,MAAAA,QAAQ,EAAES,KAAK,CAACT,QAAN,GAAiBU,MAAM,CAACI;AAD/B,KAAP;AAGH;AACJ,CAND;;AAYA,MAAMC,KAAK,GAAGnB,WAAW,CAACS,SAAS,CAACW,OAAX,CAAzB;AAEA,eAAeD,KAAf","sourcesContent":["import { createStore } from 'redux';\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit'\r\n\r\nconst initialAuthState = {\r\n    isLogged: false,\r\n    userId:null,\r\n    token:null,\r\n    login: () => {},\r\n    logout: () => {}\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name:'authorization',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        isLogged(state) {\r\n            state.isLogged = !state.isLogged\r\n        },\r\n        userId(state) {\r\n            state.userId = state.userId\r\n        },\r\n        token(state, action) {\r\n            state.token = action.tokenString\r\n        },\r\n        login() {},\r\n        logout() {}\r\n    }\r\n})\r\n\r\nconst authorization = (state = initialAuthState, action ) => {\r\n    if(action.type === 'login'){\r\n        return { \r\n            isLogged: state.isLogged = action.value,\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst store = createStore(authSlice.reducer)\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}